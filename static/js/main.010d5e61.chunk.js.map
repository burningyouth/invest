{"version":3,"sources":["features/theme/components/ThemeProvider.tsx","features/theme/hooks/useThemeContextValue.ts","shared/hooks/useStorageState.ts","features/theme/components/ThemeButton.tsx","features/theme/hooks/useTheme.ts","app/index.tsx","reportWebVitals.ts","service-worker-registration.ts","index.tsx"],"names":["ThemeContext","createContext","theme","setTheme","ThemeProvider","children","Provider","value","useThemeContextValue","key","defaultValue","window","localStorage","Error","useState","item","getItem","JSON","parse","error","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","e","useStorageState","matchMedia","ThemeButton","useContext","useTheme","onPress","history","createBrowserHistory","Routes","lazy","defaultTheme","colorScheme","height","fallback","aria-label","isIndeterminate","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","includes","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.010d5e61.chunk.js","sourcesContent":["import { createContext, ReactNode } from \"react\"\nimport { Themes } from \"../types\"\n\nexport type ThemeProviderProps = {\n  theme: Themes\n  setTheme: (theme: Themes) => void\n  children?: ReactNode\n}\n\nexport const ThemeContext = createContext<\n  Pick<ThemeProviderProps, \"setTheme\" | \"theme\">\n>({\n  theme: \"dark\",\n  setTheme: () => {},\n})\n\nexport const ThemeProvider = ({\n  theme,\n  setTheme,\n  children,\n}: ThemeProviderProps) => {\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  )\n}\n","import { useStorageState } from \"../../../shared/hooks/useStorageState\"\nimport { Themes } from \"../types\"\n\nexport const useThemeContextValue = (): [Themes, (theme: Themes) => void] => {\n  const [theme, setTheme] = useStorageState<Themes>(\n    \"colorScheme\",\n    window.matchMedia(\"(prefers-color-scheme: dark)\") ? \"dark\" : \"light\"\n  )\n  return [theme, setTheme]\n}\n","import { useState } from \"react\"\n\nexport const useStorageState = <ValueType = any>(\n  key: string,\n  defaultValue?: any\n): [ValueType, (value: ValueType) => void] => {\n  if (typeof window.localStorage === \"undefined\")\n    throw Error(\"Обновите браузер, чтобы воспользоваться этим приложением\")\n\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key)\n      return item ? JSON.parse(item) : defaultValue\n    } catch (error) {\n      return defaultValue\n    }\n  })\n  const setValue = (value: ValueType) => {\n    try {\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value\n      setStoredValue(valueToStore)\n      window.localStorage.setItem(key, JSON.stringify(valueToStore))\n    } catch (e) {}\n  }\n\n  return [storedValue, setValue]\n}\n","import { ActionButton } from \"@adobe/react-spectrum\"\nimport { useTheme } from \"../hooks/useTheme\"\nimport Moon from \"@spectrum-icons/workflow/Moon\"\nimport Light from \"@spectrum-icons/workflow/Light\"\n\nexport const ThemeButton = () => {\n  const [theme, setTheme] = useTheme()\n  return theme === \"dark\" ? (\n    <ActionButton onPress={() => setTheme(\"light\")}>\n      <Light />\n    </ActionButton>\n  ) : (\n    <ActionButton onPress={() => setTheme(\"dark\")}>\n      <Moon />\n    </ActionButton>\n  )\n}\n","import { useContext } from \"react\"\nimport { ThemeContext, ThemeProviderProps } from \"../components/ThemeProvider\"\nimport { Themes } from \"../types\"\n\nexport const useTheme = (): [Themes, (theme: Themes) => void] => {\n  const { theme, setTheme } = useContext<ThemeProviderProps>(ThemeContext)\n  return [theme, setTheme]\n}\n","import { Provider, defaultTheme, ProgressCircle } from \"@adobe/react-spectrum\"\nimport { createBrowserHistory } from \"history\"\nimport { lazy, Suspense } from \"react\"\nimport { Router } from \"react-router-dom\"\nimport { ThemeProvider, useThemeContextValue } from \"../features/theme\"\nimport \"./globals.css\"\nconst history = createBrowserHistory()\n\nconst Routes = lazy(() => import(\"../pages/Routes\"))\n\nexport default () => {\n  const [theme, setTheme] = useThemeContextValue()\n  return (\n    <Provider theme={defaultTheme} colorScheme={theme as any} height=\"100%\">\n      <ThemeProvider theme={theme} setTheme={setTheme}>\n        <Suspense\n          fallback={<ProgressCircle aria-label=\"Loading…\" isIndeterminate />}\n        >\n          <Router history={history}>\n            <Routes />\n          </Router>\n        </Suspense>\n      </ThemeProvider>\n    </Provider>\n  )\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker === null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType !== null && !contentType.includes(\"javascript\"))\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./app\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport { register } from \"./service-worker-registration\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\nregister()\n"],"sourceRoot":""}