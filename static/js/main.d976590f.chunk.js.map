{"version":3,"sources":["entities/colorScheme/config/index.ts","entities/colorScheme/components/ColorSchemeProvider.tsx","entities/colorScheme/hooks/useColorSchemeValue.ts","shared/hooks/useStorageState.ts","entities/colorScheme/components/ColorSchemeButton.tsx","entities/colorScheme/hooks/useColorScheme.ts","shared/hooks/useMediaQuery.ts","shared/theme/colors/dark.module.css","shared/theme/colors/light.module.css","shared/theme/index.ts","app/index.tsx","reportWebVitals.ts","service-worker-registration.ts","index.tsx"],"names":["ColorSchemes","ColorSchemeContext","createContext","colorScheme","dark","setColorScheme","clearStorage","ColorSchemeProvider","children","value","Provider","useColorSchemeValue","isDark","useMediaQuery","key","defaultValue","window","localStorage","Error","item","getItem","useState","JSON","parse","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","Boolean","removeItem","useStorageState","light","setColorSchemeState","isDefault","useEffect","ColorSchemeButton","useContext","useColorScheme","theme","setTheme","counter","setCounter","aria-label","onPress","query","matchMedia","mediaQuery","matches","match","setMatch","handler","addEventListener","removeEventListener","module","exports","basicTheme","defaultTheme","path","URL","homepage","history","createBrowserHistory","basename","pathname","Routes","lazy","height","fallback","isIndeterminate","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","process","href","origin","fetch","headers","response","contentType","get","status","includes","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2PAAYA,E,yBAAAA,K,YAAAA,E,eAAAA,M,gBCUCC,EAAqBC,wBAKhC,CACAC,YAAaH,EAAaI,KAC1BC,eAAgB,aAChBC,aAAc,eAGHC,EAAsB,SAAC,GAGH,IAF/BC,EAE8B,EAF9BA,SACGC,EAC2B,4BAC9B,OACE,cAACR,EAAmBS,SAApB,CAA6BD,MAAOA,EAApC,SACGD,K,eCtBMG,EAAsB,WAKjC,IAAMC,EAASC,YAAc,gCAD1B,ECP0B,SAC7BC,EACAC,GAQA,GAAmC,qBAAxBC,OAAOC,aAChB,MAAMC,MAAM,sTAEd,IAAMC,EAAOH,OAAOC,aAAaG,QAAQN,GAJtC,EAMmCO,oBAAS,WAC7C,OAAOF,EAAOG,KAAKC,MAAMJ,GAAQJ,KAPhC,mBAMIS,EANJ,KAMiBC,EANjB,KAkBH,MAAO,CAACD,EATS,SAACf,GAChB,IAAMiB,EAAejB,aAAiBkB,SAAWlB,EAAMe,GAAef,EACtEgB,EAAeC,GACfV,OAAOC,aAAaW,QAAQd,EAAKQ,KAAKO,UAAUH,KAMnBD,GAAiBK,QAAQX,GAJnC,WACnBH,OAAOC,aAAac,WAAWjB,KDT7BkB,CACF,cACApB,EAASZ,EAAaI,KAAOJ,EAAaiC,OAVzC,mBAGD9B,EAHC,KAIDE,EAJC,KAKD6B,EALC,KAMDC,EANC,KAOD7B,EAPC,KAkBH,OALA8B,qBAAU,WACRD,GACED,EAAoBtB,EAASZ,EAAaI,KAAOJ,EAAaiC,SAC/D,CAACrB,IAEG,CAACT,EAAaE,EAAgBC,I,2DEnB1B+B,EAAoB,WAAO,IAAD,ECDT,WAIxB,IAAD,EAEDC,qBAAqCrC,GACvC,MAAO,CAHJ,EACKE,YADL,EACkBE,eADlB,EACkCC,cDHGiC,GADH,mBAC9BC,EAD8B,KACvBC,EADuB,KACbnC,EADa,OAEPe,mBAAS,GAFF,mBAE9BqB,EAF8B,KAErBC,EAFqB,KAGrC,OAAOD,EAAU,EACL,SAAVF,EACE,cAAC,IAAD,CACEI,aAAW,sEACXC,QAAS,WACPJ,EAASzC,EAAaiC,OACtBU,GAAW,SAACD,GAAD,QAAeA,MAJ9B,SAOE,cAAC,IAAD,MAGF,cAAC,IAAD,CACEE,aAAW,gEACXC,QAAS,WACPJ,EAASzC,EAAaI,MACtBuC,GAAW,SAACD,GAAD,QAAeA,MAJ9B,SAOE,cAAC,IAAD,MAIJ,cAAC,IAAD,CACEE,aAAW,uEACXC,QAAS,WACPvC,IACAqC,EAAW,IAJf,SAOE,cAAC,IAAD,Q,oFEvCO9B,EAAgB,SAACiC,GAC5B,GAAsB,qBAAX9B,QAAuD,qBAAtBA,OAAO+B,WACjD,MAAM7B,MAAM,sTAEd,IAAM8B,EAAahC,OAAO+B,WAAWD,GAJS,EAKpBzB,mBAASS,QAAQkB,EAAWC,UALR,mBAKvCC,EALuC,KAKhCC,EALgC,KAa9C,OANAf,qBAAU,WACR,IAAMgB,EAAU,kBAAMD,EAASrB,QAAQkB,EAAWC,WAElD,OADAD,EAAWK,iBAAiB,SAAUD,GAC/B,kBAAMJ,EAAWM,oBAAoB,SAAUF,MACrD,IAEIF,I,wGCdTK,EAAOC,QAAU,CAAC,iBAAiB,+B,mBCAnCD,EAAOC,QAAU,CAAC,kBAAkB,iC,kNCIzBC,EAAiB,2BACvBC,KADuB,IAE1BzB,UACA7B,W,OCGIuD,EAAO,IAAIC,IAAIC,KACfC,EAAUC,YAEV,CAAEC,SAAUL,EAAKM,WAIjBC,EAASC,gBAAK,kBAAM,uDAEX,aAAO,IAAD,EACiCxD,cADjC,mBACZR,EADY,KACCE,EADD,KACiBC,EADjB,KAEnB,OACE,cAAC,IAAD,CAAUkC,MAAOiB,EAAYtD,YAAaA,EAAaiE,OAAO,OAA9D,SACE,cAAC,IAAD,CACEjE,YAAaA,EACbE,eAAgBA,EAChBC,aAAcA,EAHhB,SAKE,cAAC,WAAD,CACE+D,SAAU,cAAC,IAAD,CAAgBzB,aAAW,gBAAW0B,iBAAe,IADjE,SAGE,cAAC,IAAD,CAAQR,QAASA,EAAjB,SACE,cAACI,EAAD,aCnBGK,EAZS,SAACC,GACnBA,GAAeA,aAAuB7C,UACxC,+BAAqB8C,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCGRO,EAAcjD,QACW,cAA7Bd,OAAOgE,SAASC,UAEe,UAA7BjE,OAAOgE,SAASC,UAEhBjE,OAAOgE,SAASC,SAAS/B,MACvB,2DA2CN,SAASgC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTV,MAAK,SAACe,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACb,OAArBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAAST,KAMlBO,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MC/FjEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BlC,IDWO,SAAkBa,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIzB,IAAI8C,UAAwB1F,OAAOgE,SAAS2B,MACpDC,SAAW5F,OAAOgE,SAAS4B,OAIvC,OAGF5F,OAAOqC,iBAAiB,QAAQ,WAC9B,IAAM8B,EAAK,UAAMuB,UAAN,sBAEP3B,IAgEV,SAAiCI,EAAeC,GAE9CyB,MAAM1B,EAAO,CACX2B,QAAS,CAAE,iBAAkB,YAE5BrC,MAAK,SAACsC,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACQ,OAAhBF,IAAyBA,EAAYG,SAAS,cAG/C9B,UAAUC,cAAc8B,MAAM3C,MAAK,SAACe,GAClCA,EAAa6B,aAAa5C,MAAK,WAC7BzD,OAAOgE,SAASsC,eAKpBpC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAuB,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAM3C,MAAK,WACjCsB,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OCtC/BG,K","file":"static/js/main.d976590f.chunk.js","sourcesContent":["export enum ColorSchemes {\n  dark = \"dark\",\n  light = \"light\",\n}\n","import { createContext, ReactNode } from \"react\"\nimport { ColorSchemes } from \"../config\"\n\nexport type ColorSchemeProviderProps = {\n  colorScheme: ColorSchemes\n  setColorScheme: (theme: ColorSchemes) => void\n  clearStorage: () => void\n  children?: ReactNode\n}\n\nexport const ColorSchemeContext = createContext<\n  Pick<\n    ColorSchemeProviderProps,\n    \"setColorScheme\" | \"colorScheme\" | \"clearStorage\"\n  >\n>({\n  colorScheme: ColorSchemes.dark,\n  setColorScheme: () => {},\n  clearStorage: () => {},\n})\n\nexport const ColorSchemeProvider = ({\n  children,\n  ...value\n}: ColorSchemeProviderProps) => {\n  return (\n    <ColorSchemeContext.Provider value={value}>\n      {children}\n    </ColorSchemeContext.Provider>\n  )\n}\n","import { useEffect } from \"react\"\nimport { ColorSchemes } from \"..\"\nimport { useMediaQuery } from \"../../../shared/hooks/useMediaQuery\"\nimport { useStorageState } from \"../../../shared/hooks/useStorageState\"\n\nexport const useColorSchemeValue = (): [\n  ColorSchemes,\n  (theme: ColorSchemes) => void,\n  () => void\n] => {\n  const isDark = useMediaQuery(\"(prefers-color-scheme: dark)\")\n  const [\n    colorScheme,\n    setColorScheme,\n    setColorSchemeState,\n    isDefault,\n    clearStorage,\n  ] = useStorageState<ColorSchemes>(\n    \"colorScheme\",\n    isDark ? ColorSchemes.dark : ColorSchemes.light\n  )\n\n  useEffect(() => {\n    isDefault &&\n      setColorSchemeState(isDark ? ColorSchemes.dark : ColorSchemes.light)\n  }, [isDark])\n\n  return [colorScheme, setColorScheme, clearStorage]\n}\n","import { useState } from \"react\"\n\nexport const useStorageState = <ValueType = any>(\n  key: string,\n  defaultValue?: any\n): [\n  ValueType,\n  (value: ValueType) => void,\n  (value: ValueType) => void,\n  boolean,\n  () => void\n] => {\n  if (typeof window.localStorage === \"undefined\")\n    throw Error(\"Обновите браузер, чтобы воспользоваться этим приложением\")\n\n  const item = window.localStorage.getItem(key)\n\n  const [storedValue, setStoredValue] = useState(() => {\n    return item ? JSON.parse(item) : defaultValue\n  })\n  const setValue = (value: ValueType) => {\n    const valueToStore = value instanceof Function ? value(storedValue) : value\n    setStoredValue(valueToStore)\n    window.localStorage.setItem(key, JSON.stringify(valueToStore))\n  }\n  const clearStorage = () => {\n    window.localStorage.removeItem(key)\n  }\n\n  return [storedValue, setValue, setStoredValue, !Boolean(item), clearStorage]\n}\n","import { ActionButton } from \"@adobe/react-spectrum\"\nimport Moon from \"@spectrum-icons/workflow/Moon\"\nimport Remove from \"@spectrum-icons/workflow/Remove\"\nimport Light from \"@spectrum-icons/workflow/Light\"\nimport { useState } from \"react\"\nimport { useColorScheme } from \"../hooks/useColorScheme\"\nimport { ColorSchemes } from \"../config\"\n\nexport const ColorSchemeButton = () => {\n  const [theme, setTheme, clearStorage] = useColorScheme()\n  const [counter, setCounter] = useState(0)\n  return counter < 2 ? (\n    theme === \"dark\" ? (\n      <ActionButton\n        aria-label=\"Светлая тема\"\n        onPress={() => {\n          setTheme(ColorSchemes.light)\n          setCounter((counter) => ++counter)\n        }}\n      >\n        <Light />\n      </ActionButton>\n    ) : (\n      <ActionButton\n        aria-label=\"Темная тема\"\n        onPress={() => {\n          setTheme(ColorSchemes.dark)\n          setCounter((counter) => ++counter)\n        }}\n      >\n        <Moon />\n      </ActionButton>\n    )\n  ) : (\n    <ActionButton\n      aria-label=\"Как в системе\"\n      onPress={() => {\n        clearStorage()\n        setCounter(0)\n      }}\n    >\n      <Remove />\n    </ActionButton>\n  )\n}\n","import { useContext } from \"react\"\nimport { ColorSchemes } from \"..\"\nimport {\n  ColorSchemeProviderProps,\n  ColorSchemeContext,\n} from \"../components/ColorSchemeProvider\"\n\nexport const useColorScheme = (): [\n  ColorSchemes,\n  (theme: ColorSchemes) => void,\n  () => void\n] => {\n  const { colorScheme, setColorScheme, clearStorage } =\n    useContext<ColorSchemeProviderProps>(ColorSchemeContext)\n  return [colorScheme, setColorScheme, clearStorage]\n}\n","import { useEffect, useState } from \"react\"\n\nexport const useMediaQuery = (query: string) => {\n  if (typeof window === \"undefined\" || typeof window.matchMedia === \"undefined\")\n    throw Error(\"Обновите браузер, чтобы воспользоваться этим приложением\")\n\n  const mediaQuery = window.matchMedia(query)\n  const [match, setMatch] = useState(Boolean(mediaQuery.matches))\n\n  useEffect(() => {\n    const handler = () => setMatch(Boolean(mediaQuery.matches))\n    mediaQuery.addEventListener(\"change\", handler)\n    return () => mediaQuery.removeEventListener(\"change\", handler)\n  }, [])\n\n  return match\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spectrum--dark\":\"dark_spectrum--dark__2J0T7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spectrum--light\":\"light_spectrum--light__1_0YW\"};","import dark from \"./colors/dark.module.css\"\nimport light from \"./colors/light.module.css\"\nimport { Theme } from \"@react-types/provider\"\nimport { defaultTheme } from \"@adobe/react-spectrum\"\n\nexport let basicTheme: Theme = {\n  ...defaultTheme,\n  light,\n  dark,\n}\n","import { Provider, ProgressCircle } from \"@adobe/react-spectrum\"\nimport { createBrowserHistory } from \"history\"\nimport { lazy, Suspense } from \"react\"\nimport { Router } from \"react-router-dom\"\nimport {\n  ColorSchemeProvider,\n  useColorSchemeValue,\n} from \"../entities/colorScheme\"\nimport \"./globals.css\"\nimport { homepage } from \"../../package.json\"\nimport { basicTheme } from \"../shared/theme\"\nconst path = new URL(homepage)\nconst history = createBrowserHistory(\n  process.env.NODE_ENV === \"production\"\n    ? { basename: path.pathname }\n    : undefined\n)\n\nconst Routes = lazy(() => import(\"../pages/Routes\"))\n\nexport default () => {\n  const [colorScheme, setColorScheme, clearStorage] = useColorSchemeValue()\n  return (\n    <Provider theme={basicTheme} colorScheme={colorScheme} height=\"100%\">\n      <ColorSchemeProvider\n        colorScheme={colorScheme}\n        setColorScheme={setColorScheme}\n        clearStorage={clearStorage}\n      >\n        <Suspense\n          fallback={<ProgressCircle aria-label=\"Loading…\" isIndeterminate />}\n        >\n          <Router history={history}>\n            <Routes />\n          </Router>\n        </Suspense>\n      </ColorSchemeProvider>\n    </Provider>\n  )\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker === null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType !== null && !contentType.includes(\"javascript\"))\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./app\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport { register } from \"./service-worker-registration\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\nregister()\n"],"sourceRoot":""}